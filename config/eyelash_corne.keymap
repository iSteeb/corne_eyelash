#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors/num_word.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    layer_listeners {
        compatible = "zmk,layer-listeners";

        nav_num_feedback {
            layers = <1>;
            bindings = <&rgb_ug RGB_ON &rgb_ug RGB_OFF>;
        };
    };

    behaviors {
        hold_tap_mo_kp_simple: hold_tap_mo_kp_simple {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_MO_KP_SIMPLE";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        apostrophes: apostrophes {
            compatible = "zmk,behavior-mod-morph";
            label = "APOSTROPHES";
            bindings = <&kp LS(BACKSLASH)>, <&kp LS(NUMBER_2)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        hold_tap_kp_kp: hold_tap_kp_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_KP_KP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
        };

        colons: colons {
            compatible = "zmk,behavior-mod-morph";
            label = "COLONS";
            bindings = <&kp LS(COMMA)>, <&kp LS(DOT)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESC>;
            key-positions = <1 0>;
        };

        leader {
            bindings = <&leader>;
            key-positions = <17 18>;
        };

        num_word_combo {
            bindings = <&num_word 1>;
            key-positions = <5 4>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <23 24>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <23 24 25>;
        };

        plus {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <22 23>;
        };

        minus {
            bindings = <&kp SLASH>;
            key-positions = <37 36>;
        };

        equals {
            bindings = <&kp LS(N0)>;
            key-positions = <7 8>;
            layers = <0>;
        };

        backslash {
            bindings = <&kp RA(MINUS)>;
            key-positions = <7 23>;
            layers = <0>;
        };

        pipe {
            bindings = <&kp RA(NON_US_BSLH)>;
            key-positions = <7 22>;
        };

        slash {
            bindings = <&kp LS(N7)>;
            key-positions = <8 22>;
        };

        backtic {
            bindings = <&kp LS(EQUAL)>;
            key-positions = <22 37>;
        };

        tilde {
            bindings = <&kp RA(RIGHT_BRACKET)>;
            key-positions = <36 23>;
        };

        combo_apostrophes {
            bindings = <&apostrophes>;
            key-positions = <36 22>;
        };

        underscore {
            bindings = <&kp LS(QUESTION)>;
            key-positions = <32 33>;
        };

        question {
            bindings = <&kp LS(MINUS)>;
            key-positions = <38 39 37>;
        };

        comma {
            bindings = <&kp COMMA>;
            key-positions = <39 38>;
        };

        dot {
            bindings = <&kp DOT>;
            key-positions = <38 37>;
        };

        open_parentheses {
            bindings = <&kp LS(N8)>;
            key-positions = <1 2 3>;
        };

        close_parentheses {
            bindings = <&kp LS(N9)>;
            key-positions = <3 4 5>;
        };

        parentheses_pair {
            bindings = <&pair_parentheses>;
            key-positions = <2 3 4>;
        };

        open_braces {
            bindings = <&kp RA(N7)>;
            key-positions = <14 15 16>;
        };

        close_braces {
            bindings = <&kp RA(N0)>;
            key-positions = <16 18 17>;
        };

        braces_pair {
            bindings = <&pair_braces>;
            key-positions = <15 16 17>;
        };

        open_brackets {
            bindings = <&kp RA(N8)>;
            key-positions = <29 30 31>;
        };

        close_brackets {
            bindings = <&kp RA(N9)>;
            key-positions = <31 32 33>;
        };

        brackets_pair {
            bindings = <&pair_squares>;
            key-positions = <30 31 32>;
        };

        and {
            bindings = <&kp LS(N6)>;
            key-positions = <8 23>;
        };

        dollar {
            bindings = <&kp LS(N4)>;
            key-positions = <8 23 37>;
        };

        exclamation {
            bindings = <&kp LS(N1)>;
            key-positions = <23 37>;
        };

        asterisk {
            bindings = <&kp LS(RIGHT_BRACKET)>;
            key-positions = <9 24>;
        };

        percent {
            bindings = <&kp LS(N5)>;
            key-positions = <9 24 38>;
        };

        at {
            bindings = <&kp RA(Q)>;
            key-positions = <24 38>;
        };

        caret {
            bindings = <&kp GRAVE>;
            key-positions = <25 10 39>;
        };

        hash {
            bindings = <&kp BACKSLASH>;
            key-positions = <25 39>;
        };

        angled_open {
            bindings = <&kp NON_US_BSLH>;
            key-positions = <0 13 28>;
        };

        angled_close {
            bindings = <&kp LS(NON_US_BSLH)>;
            key-positions = <2 15 30>;
        };

        angled_pair {
            bindings = <&pair_angled>;
            key-positions = <1 14 29>;
        };
    };

    macros {
        volei: volei {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp LS(V) &kp O &kp L &kp E &kp I &kp B &kp O &kp L &kp N1 &kp N8 &kp N0 &kp N9 &kp LS(N1) &kp RET>;
            label = "VOLEI";
        };

        iow: iow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp O &kp SLASH &kp W &kp A &kp R &kp N &kp E &kp M &kp U &kp E &kp N &kp D &kp E &kp DOT &kp D &kp E>;
            label = "iow";
        };

        pair_parentheses: pair_parentheses {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N8) &kp LS(N9) &kp LEFT>;
            label = "PAIR_PARENTHESES";
        };

        pair_squares: pair_squares {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(N8) &kp RA(N9) &kp LEFT>;
            label = "PAIR_SQUARES";
        };

        pair_braces: pair_braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(N7) &kp RA(N0) &kp LEFT>;
            label = "PAIR_BRACES";
        };

        pair_angled: pair_angled {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp NON_US_BSLH &kp LS(NON_US_BSLH) &kp LEFT>;
            label = "PAIR_ANGLED";
        };

        smb: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp M &kp B &kp LS(DOT) &kp LS(N7) &kp LS(N7)>;
            label = "NEW_MACRO";
        };
    };

#undef ZMK_LEADER_SEQUENCE
#define ZMK_LEADER_SEQUENCE(name, leader_bindings, leader_sequence) \
    / { \
        behaviors { \
            leader: leader { \
                compatible = "zmk,behavior-leader-key"; \
                #binding-cells = <0>; \
                ignore-keys = <LSHFT RSHFT>; \
                leader_sequence_ ## name { \
                    bindings = <leader_bindings>; \
                    sequence = <leader_sequence>; \
                }; \
            }; \
        }; \
    };

/* German umlauts */
ZMK_LEADER_SEQUENCE(de_ae,      &kp APOSTROPHE,         A)  // ä
ZMK_LEADER_SEQUENCE(de_oe,      &kp SEMI,         O)  // ö
ZMK_LEADER_SEQUENCE(de_ue,      &kp LEFT_BRACKET,         U)  // ü
ZMK_LEADER_SEQUENCE(de_eszett,  &kp MINUS,     S)  // ß

/* Greek letters */
ZMK_LEADER_SEQUENCE(el_alpha,   &el_alpha,      E A)  // α
ZMK_LEADER_SEQUENCE(el_beta,    &el_beta,       E B)  // β
ZMK_LEADER_SEQUENCE(el_gamma,   &el_gamma,      E G)  // γ
ZMK_LEADER_SEQUENCE(el_delta,   &el_delta,      E D)  // δ
ZMK_LEADER_SEQUENCE(el_epsilon, &el_epsilon,    E E)  // ε
ZMK_LEADER_SEQUENCE(el_zeta,    &el_zeta,       E Z)  // ζ
ZMK_LEADER_SEQUENCE(el_eta,     &el_eta,        E H)  // η
ZMK_LEADER_SEQUENCE(el_theta,   &el_theta,      E V)  // θ
ZMK_LEADER_SEQUENCE(el_iota,    &el_iota,       E I)  // ι
ZMK_LEADER_SEQUENCE(el_kappa,   &el_kappa,      E K)  // κ
ZMK_LEADER_SEQUENCE(el_lambda,  &el_lambda,     E L)  // λ
ZMK_LEADER_SEQUENCE(el_mu,      &el_mu,         E M)  // μ
ZMK_LEADER_SEQUENCE(el_nu,      &el_nu,         E N)  // ν
ZMK_LEADER_SEQUENCE(el_xi,      &el_xi,         E X)  // ξ
ZMK_LEADER_SEQUENCE(el_omikron, &el_omikron,    E O)  // ο
ZMK_LEADER_SEQUENCE(el_pi,      &el_pi,         E P)  // π
ZMK_LEADER_SEQUENCE(el_rho,     &el_rho,        E R)  // ρ
ZMK_LEADER_SEQUENCE(el_sigma,   &el_sigma,      E S)  // σ
ZMK_LEADER_SEQUENCE(el_tau,     &el_tau,        E T)  // τ
ZMK_LEADER_SEQUENCE(el_upsilon, &el_upsilon,    E U)  // υ
ZMK_LEADER_SEQUENCE(el_phi,     &el_phi,        E F)  // ϕ
ZMK_LEADER_SEQUENCE(el_chi,     &el_chi,        E C)  // χ
ZMK_LEADER_SEQUENCE(el_psi,     &el_psi,        E Y)  // ψ
ZMK_LEADER_SEQUENCE(el_omega,   &el_omega,      E W)  // ω

/* Custom Strings etc. */
ZMK_LEADER_SEQUENCE(bt_imax,     &bt BT_SEL 0,        I M A X)  // Set to bluetooth device 1
ZMK_LEADER_SEQUENCE(bt_linux,     &bt BT_SEL 1,        L I N U X)  // Set to bluetooth device 2
ZMK_LEADER_SEQUENCE(volei,     &volei,        P A S S)  // hmm
ZMK_LEADER_SEQUENCE(iow,   &iow,      I O W)  // io-warnemuende.de

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E     &kp R      &kp T                         &kp UP                     &kp Y  &kp U      &kp I   &kp O   &kp P   &hold_tap_kp_kp LC(LS(LA(LEFT_GUI))) LG(BACKSLASH)
&kp LEFT_CONTROL  &kp A  &kp S  &kp D     &kp F      &kp G               &kp LEFT  &kt LEFT_SHIFT  &kp RIGHT  &kp H  &kp J      &kp K   &kp L   &trans  &hold_tap_kp_kp LS(LC(LEFT)) LS(LC(RIGHT))
&kp LEFT_SHIFT    &kp Z  &kp X  &kp C     &kp V      &kp B     &trans              &kp DOWN                   &kp N  &kp M      &trans  &trans  &trans  &hold_tap_kp_kp F20 F11
                                &kp LGUI  &kp SPACE  &kp LALT                                                 &mo 1  &kp ENTER  &mo 2
            >;

            sensor-bindings = <&inc_dec_kp DELETE BACKSPACE>;
        };

        raise {
            display-name = "NUMBERS";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &kp N4  &kp N5  &kp N6  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &kp N0  &trans
            >;
        };

        lower {
            display-name = "SHORTCUTS";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;
        };

        functional {
            bindings = <
&kp F1              &kp F2              &kp F3  &kp F4   &kp F5   &kp F6                     &trans          &trans  &trans  &trans  &trans  &trans  &trans
&kp F7              &kp F8              &kp F9  &kp F10  &kp F11  &kp F12            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp LC(LA(DELETE))  &kp LC(LA(INSERT))  &trans  &trans   &trans   &trans   &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                                &trans   &trans   &trans                                     &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        functional {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};

#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors/num_word.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        leader: leader {
            compatible = "zmk,behavior-leader-key";
            #binding-cells = <0>;

            bt_imax {
                sequence = <I M A X>;
                bindings = <&bt BT_SEL 0>;
            };

            bt_linux {
                sequence = <L I N U>;
                bindings = <&bt BT_SEL 1>;
            };

            volei {
                sequence = <V O L E>;
                bindings = <&volei>;
            };

            iow_email {
                sequence = <I O W E>;
                bindings = <&iow_email>;
            };

            dash {
                sequence = <D A S H>;
                bindings = <&kp F19>;
            };

            desk {
                sequence = <D E S K>;
                bindings = <&kp F11>;
            };
        };

        hashtag_comment: hashtag_comment {
            compatible = "zmk,behavior-tap-dance";
            label = "HASHTAG_COMMENT";
            #binding-cells = <0>;
            bindings = <&kp BACKSLASH>, <&kp LG(BACKSLASH)>;
        };

        hold_tap_mo_kp_simple: hold_tap_mo_kp_simple {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_MO_KP_SIMPLE";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        apostrophes: apostrophes {
            compatible = "zmk,behavior-mod-morph";
            label = "APOSTROPHES";
            bindings = <&kp LS(BACKSLASH)>, <&kp LS(NUMBER_2)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        hold_tap_kp_kp: hold_tap_kp_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_KP_KP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
        };

        comma_angled: comma_angled {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_ANGLED";
            bindings = <&kp COMMA>, <&kp NON_US_BSLH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dot_angled: dot_angled {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_ANGLED";
            bindings = <&kp DOT>, <&kp LS(NON_US_BSLH)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        colons: colons {
            compatible = "zmk,behavior-mod-morph";
            label = "COLONS";
            bindings = <&kp LS(DOT)>, <&kp LS(COMMA)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        parentheses: parentheses {
            compatible = "zmk,behavior-tap-dance";
            label = "PARENTHESES";
            #binding-cells = <0>;
            bindings = <&kp LS(N8)>, <&kp LS(N9)>;
        };

        brackets: brackets {
            compatible = "zmk,behavior-tap-dance";
            label = "BRACKETS";
            #binding-cells = <0>;
            bindings = <&kp RA(N8)>, <&kp RA(N9)>;
        };

        braces: braces {
            compatible = "zmk,behavior-tap-dance";
            label = "BRACES";
            #binding-cells = <0>;
            bindings = <&kp RA(N7)>, <&kp RA(N0)>;
        };

        brackets_dance_nested: brackets_dance_nested {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACKETS_DANCE_NESTED";
            bindings = <&parentheses>, <&braces>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        brackets_dance: brackets_dance {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACKETS_DANCE";
            bindings = <&brackets_dance_nested>, <&brackets>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESC>;
            key-positions = <1 0>;
        };

        at {
            bindings = <&kp RA(Q)>;
            key-positions = <14 5>;
        };

        and {
            bindings = <&kp LS(N6)>;
            key-positions = <16 14>;
        };

        dollar {
            bindings = <&kp LS(N4)>;
            key-positions = <16 15>;
        };

        euro {
            bindings = <&kp RA(E)>;
            key-positions = <3 16>;
        };

        percent {
            bindings = <&kp LS(N5)>;
            key-positions = <23 36>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <23 24>;
        };

        ae {
            bindings = <&kp APOSTROPHE>;
            key-positions = <3 14>;
        };

        oe {
            bindings = <&kp SEMI>;
            key-positions = <3 10>;
        };

        ue {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 8>;
        };

        sz {
            bindings = <&kp MINUS>;
            key-positions = <15 29>;
        };

        tilde {
            bindings = <&kp RA(RIGHT_BRACKET)>;
            key-positions = <31 17 33>;
        };

        grave {
            bindings = <&kp EQUAL>;
            key-positions = <18 4>;
        };

        opt+bksp {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <23 24 25>;
        };

        cmd+bksp {
            bindings = <&kp LG(BACKSPACE)>;
            key-positions = <23 24 25 26>;
        };

        plus {
            bindings = <&kp KP_PLUS>;
            key-positions = <22 23>;
        };

        minus {
            bindings = <&kp KP_MINUS>;
            key-positions = <37 36>;
        };

        times {
            bindings = <&kp KP_MULTIPLY>;
            key-positions = <8 23>;
        };

        caret {
            bindings = <&kp GRAVE>;
            key-positions = <4 18 16>;
        };

        pipe {
            bindings = <&kp RA(NON_US_BACKSLASH)>;
            key-positions = <7 22>;
            layers = <0>;
        };

        backslash {
            bindings = <&kp RA(MINUS)>;
            key-positions = <7 23>;
            layers = <0>;
        };

        equals {
            bindings = <&kp KP_EQUAL>;
            key-positions = <7 8>;
        };

        slash {
            bindings = <&kp LS(N7)>;
            key-positions = <8 22>;
        };

        underscore {
            bindings = <&kp LS(QUESTION)>;
            key-positions = <32 33>;
        };

        leader {
            bindings = <&leader>;
            key-positions = <17 18>;
        };

        exclamation {
            bindings = <&kp LS(N1)>;
            key-positions = <38 24>;
        };

        question {
            bindings = <&kp LS(MINUS)>;
            key-positions = <38 39>;
        };
    };

    macros {
        volei: volei {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp LS(V) &kp O &kp L &kp E &kp I &kp B &kp O &kp L &kp N1 &kp N8 &kp N0 &kp N9 &kp LS(N1) &kp RET>;
            label = "VOLEI";
        };

        iow_email: iow_email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp T &kp E &kp V &kp E &kp N &kp DOT &kp D &kp U &kp Z &kp E &kp V &kp I &kp C &kp H &kp RA(Q) &kp I &kp O &kp KP_MINUS &kp W &kp A &kp R &kp N &kp E &kp M &kp U &kp E &kp N &kp D &kp E &kp DOT &kp D &kp E>;
            label = "iow_email";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E     &kp R      &kp T                                  &kp UP                     &kp Y        &kp U      &kp I                    &kp O        &kp P         &hashtag_comment
&kp LEFT_CONTROL  &kp A  &kp S  &kp D     &kp F      &kp G                        &kp LEFT  &kt LEFT_SHIFT  &kp RIGHT  &kp H        &kp J      &kp K                    &kp L        &apostrophes  &kp LEFT_ALT
&kp LEFT_SHIFT    &kp Z  &kp X  &kp C     &kp V      &kp B              &tog 6              &kp DOWN                   &kp N        &kp M      &comma_angled            &dot_angled  &colons       &brackets_dance
                                &kp LGUI  &kp SPACE  &kp LC(LS(RIGHT))                                                 &num_word 3  &kp ENTER  &hold_tap_kp_kp F20 F11
            >;

            sensor-bindings = <&inc_dec_kp DELETE BACKSPACE>;
        };

        open_brackets {
            display-name = "OPEN";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &kp RA(N7)  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp RA(N8)  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans      &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;
        };

        close_brackets {
            display-name = "CLOSE";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &kp RA(N0)
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp RA(N9)
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;
        };

        raise {
            display-name = "NUMBER";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &kp COMMA  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &kp DOT    &kp N4  &kp N5  &kp N6  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &kp N0     &kp N1  &kp N2  &kp N3  &trans  &trans
                        &trans  &trans  &trans                                    &trans     &trans  &trans
            >;
        };

        lower {
            display-name = "SHORTCUTS";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;
        };

        ADJUST_LAYER {
            display-name = "ADJUST";
            bindings = <
&kp C_POWER  &trans          &trans           &trans           &trans           &kp C_SLEEP                                 &rgb_ug RGB_HUI                   &trans            &kp C_PREVIOUS        &kp C_NEXT            &trans      &trans  &trans
&bt BT_CLR   &bt BT_SEL 0    &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4               &rgb_ug RGB_SAD  &mkp LCLK        &rgb_ug RGB_SAI  &kp C_PLAY_PAUSE  &kp C_VOL_DN          &kp C_VOLUME_UP       &kp C_MUTE  &trans  &sys_reset
&trans       &rgb_ug RGB_ON  &rgb_ug RGB_OFF  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF  &trans                     &rgb_ug RGB_HUD                   &trans            &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans      &trans  &bootloader
                                              &trans           &mo 5            &trans                                                                        &trans            &mo 5                 &trans
            >;
        };

        JOSI {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                            &kp LS(F10)                   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &kp LEFT_ARROW  &kp SPACE    &kp RIGHT_ARROW  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                    &kp LS(F7)                    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                                          &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp LS(RIGHT) LS(LEFT)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust {
            if-layers = <3 4>;
            then-layer = <5>;
        };
    };
};
